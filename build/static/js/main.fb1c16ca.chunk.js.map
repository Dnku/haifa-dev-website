{"version":3,"sources":["components/NavBar/NavBar.jsx","components/Pages/Home/Home.jsx","components/Pages/Project/Project.jsx","components/Pages/NotFoundPage/NotFoundPage.jsx","components/App/App.js","serviceWorker.js","index.js","components/NavBar/NavBar.module.scss"],"names":["NavBar","props","linkStyle","name","current","styles","navLinkSelected","navLinkStatic","id","href","className","Home","target","rel","Project","useParams","NotFoundPage","Routes","exact","path","component","App","globalStyles","container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"uSAoDeA,EA3CA,SAACC,GAMZ,SAASC,EAAUC,GAEf,OAAIA,IAASF,EAAMG,QACRC,IAAOC,gBAGXD,IAAOE,cAGlB,OACI,6BACI,uBAAGC,GAAG,UACFC,KAAK,QACLC,UAAWR,EAAU,SAFzB,QAKA,uBAAGM,GAAG,WACFC,KAAK,SACLC,UAAWR,EAAU,UAFzB,YAKA,uBAAGM,GAAG,aACFC,KAAK,WACLC,UAAWR,EAAU,YAFzB,aCrBIS,EAbH,WACX,OACE,yBAAKD,UAAU,OACT,4BAAQA,UAAU,cAChB,mCAAQ,4CAAR,wBACA,uBAAGA,UAAU,WAAWD,KAAK,sBAAsBG,OAAO,SAASC,IAAI,uBAAvE,kBCMIC,EAVA,WAAO,IACXN,EAAOO,cAAPP,GAER,OACE,6BACE,mCAASA,KCIDQ,EATK,WAEjB,OACE,6BACE,2C,yBCGFC,EAAS,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,gBAAgBC,UAAWN,IAC7C,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,WAAWC,UAAWN,IACxC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAWJ,MActBK,EAVH,kBACV,kBAAC,IAAD,KACA,yBAAKX,UAAWY,IAAaC,WAC3B,kBAAC,EAAD,MACA,kBAAC,EAAD,SCXgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,kBElInBC,EAAOC,QAAU,CAAC,YAAc,4BAA4B,UAAY,0BAA0B,cAAgB,8BAA8B,gBAAkB,gCAAgC,OAAS,0B","file":"static/js/main.fb1c16ca.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './NavBar.module.scss';\n\n/**\n * A navigation bar for the wesite.\n * @param {string} props.current The current location name the user is navigating through.\n * @version 1.1\n * @author [David Klein, Polarts](https://github.com/Polarts)\n */\nconst NavBar = (props) =>  {\n    \n    /**\n     * Compares the given name with props.current and returns the proper style.\n     * @param {*} name the name of the nav location the link represents.\n     */\n    function linkStyle(name) {\n\n        if (name === props.current) {\n            return styles.navLinkSelected;\n        }\n\n        return styles.navLinkStatic\n    }\n\n    return (\n        <nav>\n            <a id=\"homeNav\" \n                href=\"#home\" \n                className={linkStyle(\"home\")}>\n                Home\n            </a>\n            <a id=\"aboutNav\" \n                href=\"#about\" \n                className={linkStyle(\"about\")}>\n                About Us\n            </a>\n            <a id=\"contactNav\" \n                href=\"#contact\" \n                className={linkStyle(\"contact\")}>\n                Contact\n            </a>\n\n            {/* <a className={styles.fbLink}\n                href=\"https://www.facebook.com/groups/haifadev/\">\n                <img src=\"https://www.facebook.com/images/fb_icon_325x325.png\" alt=\"Facebook\"/>\n            </a> */}\n\n        </nav>\n    );\n\n}\n\nexport default NavBar;","import React from 'react';\n\nconst Home = () => {\n  return (\n    <div className=\"App\">\n          <header className=\"App-header\">\n            <p>Edit <code>src/App.js</code> and save to reload.</p>\n            <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n              Learn React\n            </a>\n          </header>\n        </div>\n      );\n}\n    \nexport default  Home; \n\n","import React from 'react';\nimport { useParams } from 'react-router';\n\nconst Project = () => {\n    const { id } = useParams();\n  \n    return (\n      <div>\n        <h3>ID: {id}</h3>\n      </div>\n    );\n  }\n    \nexport default  Project; \n\n","\nimport React from 'react';\n\nconst NotFoundPage = () => {\n  \n    return (\n      <div>\n        <h1>NOT FOUND</h1>\n      </div>\n    );\n  }\n    \nexport default  NotFoundPage; \n\n","import React from 'react';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom'\nimport NavBar from  '../NavBar/NavBar'\nimport Home from '../Pages/Home/Home'\nimport Project  from '../Pages/Project/Project'\nimport NotFoundPage  from '../Pages/NotFoundPage/NotFoundPage'\nimport './App.css';\nimport globalStyles from '../../stylesheets/global.scss';\n\n\nconst Routes = () => ( \n  <Switch>\n    <Route exact path=\"/\" component={Home} />\n    <Route exact path=\"/projects/:id\" component={Project} />\n    <Route exact path=\"/project\" component={Project} />\n    <Route exact path=\"*\" component={NotFoundPage} />\n  </Switch>\n)\n\nconst App = () => (\n  <BrowserRouter>\n  <div className={globalStyles.container}>\n    <NavBar></NavBar>\n    <Routes />\n  </div>\n    \n  </BrowserRouter>\n)\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chromeframe\":\"NavBar_chromeframe__3CbTJ\",\"container\":\"NavBar_container__WwQ6n\",\"navLinkStatic\":\"NavBar_navLinkStatic__1hl-s\",\"navLinkSelected\":\"NavBar_navLinkSelected__24Ru0\",\"fbLink\":\"NavBar_fbLink__1UCRf\"};"],"sourceRoot":""}